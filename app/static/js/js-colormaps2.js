
/*
Add contents of data.js here:
 */

const data = {"bwr": {"interpolate": false, "colors": [[0.0, 0.0, 1.0], [0.0392156862745098, 0.0392156862745098, 1.0], [0.0784313725490196, 0.0784313725490196, 1.0], [0.11764705882352941, 0.11764705882352941, 1.0], [0.1568627450980392, 0.1568627450980392, 1.0], [0.19607843137254902, 0.19607843137254902, 1.0], [0.23529411764705882, 0.23529411764705882, 1.0], [0.27450980392156865, 0.27450980392156865, 1.0], [0.3137254901960784, 0.3137254901960784, 1.0], [0.3607843137254902, 0.3607843137254902, 1.0], [0.4, 0.4, 1.0], [0.4392156862745098, 0.4392156862745098, 1.0], [0.4784313725490196, 0.4784313725490196, 1.0], [0.5176470588235293, 0.5176470588235293, 1.0], [0.5568627450980392, 0.5568627450980392, 1.0], [0.596078431372549, 0.596078431372549, 1.0], [0.6352941176470588, 0.6352941176470588, 1.0], [0.6823529411764706, 0.6823529411764706, 1.0], [0.7215686274509804, 0.7215686274509804, 1.0], [0.7607843137254902, 0.7607843137254902, 1.0], [0.8, 0.8, 1.0], [0.8392156862745098, 0.8392156862745098, 1.0], [0.8784313725490196, 0.8784313725490196, 1.0], [0.9176470588235294, 0.9176470588235294, 1.0], [0.9568627450980391, 0.9568627450980391, 1.0], [1.0, 0.996078431372549, 0.996078431372549], [1.0, 0.9568627450980393, 0.9568627450980393], [1.0, 0.9176470588235294, 0.9176470588235294], [1.0, 0.8784313725490196, 0.8784313725490196], [1.0, 0.83921568627451, 0.83921568627451], [1.0, 0.8, 0.8], [1.0, 0.7607843137254902, 0.7607843137254902], [1.0, 0.7215686274509804, 0.7215686274509804], [1.0, 0.6823529411764706, 0.6823529411764706], [1.0, 0.6352941176470588, 0.6352941176470588], [1.0, 0.596078431372549, 0.596078431372549], [1.0, 0.5568627450980392, 0.5568627450980392], [1.0, 0.5176470588235293, 0.5176470588235293], [1.0, 0.4784313725490196, 0.4784313725490196], [1.0, 0.4392156862745098, 0.4392156862745098], [1.0, 0.4, 0.4], [1.0, 0.36078431372549025, 0.36078431372549025], [1.0, 0.3137254901960784, 0.3137254901960784], [1.0, 0.27450980392156865, 0.27450980392156865], [1.0, 0.23529411764705888, 0.23529411764705888], [1.0, 0.196078431372549, 0.196078431372549], [1.0, 0.1568627450980392, 0.1568627450980392], [1.0, 0.11764705882352944, 0.11764705882352944], [1.0, 0.07843137254901966, 0.07843137254901966], [1.0, 0.039215686274509776, 0.039215686274509776], [1.0, 0.0, 0.0]]},"viridis": {"interpolate": false, "colors":[[0.267004, 0.004874, 0.329415], [0.273809, 0.031497, 0.358853], [0.278791, 0.062145, 0.386592], [0.281924, 0.089666, 0.412415], [0.283197, 0.11568, 0.436115], [0.282623, 0.140926, 0.457517], [0.280255, 0.165693, 0.476498], [0.276194, 0.190074, 0.493001], [0.270595, 0.214069, 0.507052], [0.262138, 0.242286, 0.520837], [0.253935, 0.265254, 0.529983], [0.244972, 0.287675, 0.53726], [0.235526, 0.309527, 0.542944], [0.225863, 0.330805, 0.547314], [0.21621, 0.351535, 0.550627], [0.206756, 0.371758, 0.553117], [0.197636, 0.391528, 0.554969], [0.187231, 0.414746, 0.556547], [0.179019, 0.433756, 0.55743], [0.171176, 0.45253, 0.557965], [0.163625, 0.471133, 0.558148], [0.15627, 0.489624, 0.557936], [0.149039, 0.508051, 0.55725], [0.141935, 0.526453, 0.555991], [0.135066, 0.544853, 0.554029], [0.127568, 0.566949, 0.550556], [0.122606, 0.585371, 0.546557], [0.119738, 0.603785, 0.5414], [0.120081, 0.622161, 0.534946], [0.12478, 0.640461, 0.527068], [0.134692, 0.658636, 0.517649], [0.150148, 0.676631, 0.506589], [0.170948, 0.694384, 0.493803], [0.196571, 0.711827, 0.479221], [0.232815, 0.732247, 0.459277], [0.266941, 0.748751, 0.440573], [0.304148, 0.764704, 0.419943], [0.344074, 0.780029, 0.397381], [0.386433, 0.794644, 0.372886], [0.430983, 0.808473, 0.346476], [0.477504, 0.821444, 0.318195], [0.525776, 0.833491, 0.288127], [0.585678, 0.846661, 0.249897], [0.636902, 0.856542, 0.21662], [0.688944, 0.865448, 0.182725], [0.741388, 0.873449, 0.149561], [0.79376, 0.880678, 0.120005], [0.845561, 0.887322, 0.099702], [0.89632, 0.893616, 0.096335], [0.945636, 0.899815, 0.112838], [0.993248, 0.906157, 0.143936]]}}
const bwr = partial('bwr');
const viridis = partial('viridis');
/*
Define auxiliary functions for evaluating colormaps
 */

function evaluate_cmap(x, name, reverse) {
  /**
   * Evaluate colormap `name` at some value `x`.
   * @param {number} x - The value (between 0 and 1) at which to evaluate the colormap.
   * @param {string} name - The name of the colormap (see matplotlib documentation).
   * @reverse {boolean} reverse - Whether or not to reverse the colormap.
   * @return {list} - A 3-tuple (R, G, B) containing the color assigned to `x`.
   */

  // Ensure that the value of `x` is valid (i.e., 0 <= x <= 1)
  if (!(0 <= x <= 1)) {
    alert('Illegal value for x! Must be in [0, 1].')
  }

  // Ensure that `name` is a valid colormap
  if (!(name in data)) {
    alert('Colormap ' + name + 'does not exist!');
  }

  // We can get the reverse colormap by evaluating colormap(1-x)
  if (reverse === true) {
    x = 1 - x;
  }

  // Get the colors and whether or not we need to interpolate
  let colors = data[name]['colors'];
  let interpolate = data[name]['interpolate'];
  if (interpolate === true) {
    return interpolated(x, colors);
  } else {
    return qualitative(x, colors);
  }
}

function interpolated(x, colors) {
  let lo = Math.floor(x * (colors.length - 1));
  let hi = Math.ceil(x * (colors.length - 1));
  let r = Math.round((colors[lo][0] + colors[hi][0]) / 2 * 255);
  let g = Math.round((colors[lo][1] + colors[hi][1]) / 2 * 255);
  let b = Math.round((colors[lo][2] + colors[hi][2]) / 2 * 255);
  return [r, g, b];
}

function qualitative(x, colors) {
  let idx = 0;
  while (x > (idx + 1) / (colors.length - 0) ) { idx++; }
  console.log(idx,colors[idx])
  let r = Math.round(colors[idx][0] * 255);
  let g = Math.round(colors[idx][1] * 255);
  let b = Math.round(colors[idx][2] * 255);
  return [r, g, b];
}

function partial(name) {
  if (name.endsWith('_r')) {
    return function(x) { return evaluate_cmap(x, name.substring(0, name.length - 2), true) };
  } else {
    return function(x) { return evaluate_cmap(x, name, false) };
  }

}
